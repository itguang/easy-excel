plugins {
    id 'java'
    id 'maven'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
}

group 'com.xingren'
version '1.0.2-RELEASE'

sourceCompatibility = 1.8

// 指定本地上传的路径
def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

repositories {
    mavenLocal()
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
    jcenter()
    mavenCentral()

}

// 发布 jar 包, 执行 gradle uploadArchives(或者 ./gradlew uploadArchives) 以发布 jar 包。
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: localMavenRepo)

            //构造项目的Pom文件
            pom.project {
                name = project.name
                packaging = 'jar'
                description = 'easy-excel'
            }
        }
    }
}


dependencies {
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")

    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.2'

    annotationProcessor 'org.projectlombok:lombok:1.18.2'
    compileOnly 'org.projectlombok:lombok:1.18.2'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.2'
    testCompileOnly 'org.projectlombok:lombok:1.18.2'


}

//test {
//    useJUnitPlatform()
//}

tasks.test {
    useJUnitPlatform()
}


jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
    }
}
check.dependsOn jacocoTestReport

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources


// 发布到 maven 中央仓库
// -------------------------------------------------------------------------
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'io.github.itguang'
            artifactId project.name
            version "${version}"
            from components.java
            artifact sourcesJar
            artifact javadocJar

            // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
            pom {
                name = "easy-excel"
                description = "easy-excel 是基于 Apache POI 框架的一款扩展封装库"
                url = "https://github.com/itguang/easy-excel"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "itguang"
                        name = "李增光"
                        email = "itguang@qq.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/itguang/easy-excel"
                    developerConnection = "scm:git:https://github.com/itguang/easy-excel"
                    url = "https://github.com/itguang/easy-excel"
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            // 如果version以SNAPSHOT结尾就会上传到快照仓库，如果不是就上传到release仓库
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = "${NEXUS_USERNAME}"
                password = "${NEXUS_PASSWORD}"
            }
        }

    }
}

signing {
    sign publishing.publications.mavenJava
}